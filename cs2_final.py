# -*- coding: utf-8 -*-
"""CS2_final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TmJ-Eq9iVwC3_LIx2-k5c8nY1M92Q1KA
"""

!pip install tensorflow-io
!pip install tensorflow-addons

# Importing the necessary libraries
import tensorflow as tf
import tensorflow_io as tfio
import tensorflow_addons as tfa
import pandas as pd  
import numpy as np
import os
import tensorflow_hub as hub
import datetime
import warnings
warnings.filterwarnings('ignore')

class final:

  def load_files(self):
    #https://machinelearningmastery.com/save-load-keras-deep-learning-models/

    #load Yamnet and get embeddings
    yamnet_model_handle= 'https://tfhub.dev/google/yamnet/1'
    self.yamnet_model=hub.load(yamnet_model_handle)
  
    self.data=pd.read_csv('/content/drive/MyDrive/Appliedai files/Case_Study_2/train_tp.csv')

    #Load the models from json files
    #load the weights
    json_file_1=open('/content/drive/MyDrive/Appliedai files/Case_Study_2/model_1.json','r')
    loaded_model_json_1=json_file_1.read()
    json_file_1.close()
    self.loaded_model_1= tf.keras.models.model_from_json(loaded_model_json_1)
    self.loaded_model_1.load_weights('/content/drive/MyDrive/Appliedai files/Case_Study_2/CS2_modelling2/model_6/weights-26-0.6329.hdf5')

    json_file_2=open('/content/drive/MyDrive/Appliedai files/Case_Study_2/model_2.json','r')
    loaded_model_json_2=json_file_2.read()
    json_file_2.close()
    self.loaded_model_2= tf.keras.models.model_from_json(loaded_model_json_2)
    self.loaded_model_2.load_weights('/content/drive/MyDrive/Appliedai files/Case_Study_2/CS2_modelling2/model_1/21-0.9206-0.7486.h5')

    json_file_3=open('/content/drive/MyDrive/Appliedai files/Case_Study_2/model_3.json','r')
    loaded_model_json_3=json_file_3.read()
    json_file_3.close()
    self.loaded_model_3= tf.keras.models.model_from_json(loaded_model_json_3)
    self.loaded_model_3.load_weights('/content/drive/MyDrive/Appliedai files/Case_Study_2/CS2_modelling2/model_2/32-0.8647-0.7383.h5')

    json_file_4=open('/content/drive/MyDrive/Appliedai files/Case_Study_2/model_4.json','r')
    loaded_model_json_4=json_file_4.read()
    json_file_4.close()
    self.loaded_model_4= tf.keras.models.model_from_json(loaded_model_json_4)
    self.loaded_model_4.load_weights('/content/drive/MyDrive/Appliedai files/Case_Study_2/model_1/weights-69-0.6032.hdf5')

 
  def data_preprocess(self,id):


    #loading the raw audio
    audio= tfio.IOTensor.graph(tf.int16).from_audio('/content/drive/MyDrive/Appliedai files/Case_Study_2/train/'+self.data['recording_id'][id]+'.flac')
    audio_slice = audio[100:]

    #remove last dimension
    audio_tensor= tf.squeeze(audio_slice,axis=[-1])
    audio_tensor= tf.cast(audio_tensor, tf.float32)

    #convert to spectrogram
    spectrogram = tfio.audio.spectrogram(audio_tensor,nfft=2048,window=2048,stride=512)

    #convert to melscale
    mel_spectrogram=tfio.audio.melscale(spectrogram,rate=48000,mels=384,fmin=40,fmax=40000)

    #convert to dbscale
    mel_spectrogram = tfio.audio.dbscale(mel_spectrogram, top_db=80)

    #Expanding the dimensions
    image=tf.expand_dims(mel_spectrogram,axis=-1)
    #Resizing
    image=tf.image.resize(image,[384,768])
    #converting to rgb image
    image=tf.image.grayscale_to_rgb(image)

    #resample the audio to feed the signal to yamnet model
    sample_rate = tf.cast(48000, dtype=tf.int64)
    audio_tensor = tfio.audio.resample(audio_tensor, rate_in=sample_rate, rate_out=16000)

    #Get the embeddings from yamnet
    scores, embeddings, spectrogram = yamnet_model(audio_tensor)

    return image,embeddings
  
  def predict(id):

    start_time=datetime.datetime.now()
    #load files
    self.load_files()

    #preprocess audio data
    image,embeddings= data_preprocess(id)

    cnn_models=[self.loaded_model_1,self.loaded_model_2,self.loaded_model_3]
    rec_id=self.data['recording'][id]
    #Ensembling the models and making predictions 
    y_pred = []
    for model in cnn_models:
      pred = tf.sigmoid(model(image)).numpy()
      y_pred.append(pred)

    y_pred=np.asarray(y_pred)
    cnn_mean_pred=np.mean(y_pred,axis=0)
    rnn_pred=self.loaded_model_4.predict(embeddings)
    cnn_mean_pred=list(cnn_mean_pred)
    rnn_pred=list(rnn_pred)

    final_pred.append(cnn_mean_pred)
    final_pred.append(rnn_pred)
    final_pred=np.asarray(final_pred)
    mean_final_pred=np.mean(final_pred,axis=0)

    #Return top three predictions
    predictions=np.argsort(mean_final_pred)
    top_3_predictions= predictions[-3:]

    end_time=datetime.datetime.now()-start_time
    #print("Total time taken for prediction:",datetime.datetime.now()-start_time)
    return rec_id,top_3_predictions,end_time